'** Custom Sprite Bank Creator **  
'   Author: Alper Sönmez (27.03.2021) v0.4 
' -- Gets sprite data from the given iff sheet. -- 
'
'  Animated characters from pixel artists are often distributed as png sheets.   
'  To be able to use those images with the Custom Sprite Engine you should 
'  first convert those sheets into 16 (or 4) colored ilbm (iff) files. 
'  This can easily be done in Personal Paint. While doing that examine the 
'  layout of the frames on the sheet (there is no standard to this).   
'  Set the Sheet, Image and File parameters below and run this program to  
'  get your Custom Sprite Bank into the filename you set _SAVE$ to.  
'

'File parameters 
_FILE$="sprite_sheet_all_R.iff"
_SAVE$="sprites_R.spr"

'Sheet parameters
_START_H=12 : Rem The empty space left on the left side of the sheet 
_START_V=16 : Rem The empty space left on the top of the sheet 
_SEPARATION_H=48 : Rem Horizontal spacing between each image    
_SEPARATION_V=1 : Rem Vertical spacing between each image
_COLUMNS=12 : Rem How many columns of images are there on the sheet
_ROWS=6 : Rem How many rows of images are there on the sheet 
_REVERSE=False : Rem Get images from right to left instead

'Image parameters  
_COLORS=16 : Rem Color depth for the sprites to be created (either 4 or 16) 
_WIDTH=32 : Rem Can be 16,32,48,64,80,96,112,128 
_HEIGHT=37 : Rem Height of each sprite (can be any height)
_VOFFS=0 : Rem Sprites will be displayed this much pixels ahead vertically

'**************************************************

'Check parameters
If _COLORS<>4 and _COLORS<>16 Then Error 149
If _WIDTH mod 16<>0 or _WIDTH>128 or _WIDTH<16 Then Error 149
If _COLORS=16 and _WIDTH>64 Then Error 149
If _COLORS=4 Then _DEPTH=2 Else _DEPTH=4

'The size of 1 single standard sprite structure: 
'  2 Sprite control words = 4bytes 
'  2 Words per line = 4*_HEIGHT bytes
'  2 NULL Words for termination = 4 bytes
_SPRITE_SIZE=4+(_HEIGHT*4)+4

'  Image size (How many sprites are attached or glued) 
_SPRITES=_WIDTH/16*_DEPTH/2
_IMAGE_SIZE=_SPRITE_SIZE*_SPRITES

'Size of lookup table
_COUNT=_COLUMNS*_ROWS : Rem _COUNT is an expectation not the real number of images 
'  1 word for table size (2 bytes) 
'  Offsets table (_COUNT x 4bytes) 
'  1 word for final offset (2 bytes) 
_TABLE_SIZE=2+(_COUNT*4)+2

'Size of bank is:
'  Table+Count*(Image Size)  
_BANK_SIZE=_TABLE_SIZE+(_COUNT*_IMAGE_SIZE)

'Bitmap's modulo   
_MODULO=_WIDTH/8

'Sprite type 
_TYPE=_WIDTH/16*(_DEPTH/2)
If _DEPTH=4 Then Bset 4,_TYPE

Screen Open 0,1022,80,_COLORS,Lowres : Curs Off : Flash Off : Cls 0
Screen Open 1,_WIDTH,_HEIGHT,_COLORS,Lowres : Curs Off : Flash Off 
Screen 1
PLANE1=Phybase(0)
PLANE2=Phybase(1)
If _DEPTH=4
   PLANE3=Phybase(2)
   PLANE4=Phybase(3)
End If 

Load Iff _FILE$,0

Reserve As Work 5,_BANK_SIZE

'Set structure offsets:
_NUM_IMAGES_PT=Start(5)
_TABLE_PT=Start(5)+2
_IMAGES_PT=Start(5)+_TABLE_SIZE

_OFFSET_OF_NEXT=0

If _REVERSE=True
   _CS=_COLUMNS-1
   _CE=0
   _C_STEP=-1
Else 
   _CS=0
   _CE=_COLUMNS-1
   _C_STEP=1
End If 

IMG=0
For R=0 To _ROWS-1
   For C=_CS To _CE Step _C_STEP
      X1=_START_H+C*(_WIDTH+_SEPARATION_H)
      X2=X1+_WIDTH

      Y1=_START_V+R*(_HEIGHT+_SEPARATION_V)
      Y2=Y1+_HEIGHT

      Screen Copy 0,X1,Y1,X2,Y2 To 1,0,0

      Gosub _ANALYZE_IMAGE
      If _A_WIDTH<>0
         Gosub _GET_SPRITE
         Gosub _SET_TABLE

         Inc IMG
      End If 
   Next C
Next R

'Set num sprites 
_A_COUNT=IMG
Doke _NUM_IMAGES_PT,_A_COUNT

'set final offset (also is the size of image data) 
Doke _TABLE_PT+(_A_COUNT*4),_OFFSET_OF_NEXT

'Save the file 
'************* 
_A_TABLE_SIZE=2+(_A_COUNT*4)+2
_A_BANK_SIZE=_A_TABLE_SIZE+_OFFSET_OF_NEXT

'Create the trimmed bank to be saved 
Reserve As Work 6,_A_BANK_SIZE

'Copy lookup table 
Copy Start(5),Start(5)+_A_TABLE_SIZE To Start(6)

'Copy image data 
Copy _IMAGES_PT,_IMAGES_PT+_OFFSET_OF_NEXT To Start(6)+_A_TABLE_SIZE

Bsave _SAVE$,Start(6) To Start(6)+_A_BANK_SIZE

Erase 5
Erase 6
Screen 0
DUMPCOLORS
End 

_ANALYZE_IMAGE:
   _A_START=0
   _A_END=_HEIGHT-1
   _A_WIDTH=_WIDTH
   _A_DEPTH=_DEPTH
   _A_IMAGE_SIZE=_IMAGE_SIZE
   _A_SPRITE_SIZE=_SPRITE_SIZE
   _A_TYPE=_TYPE
   _A_VOFFS=_VOFFS

   'Test left glued sprites for being empty 
   For G=(_WIDTH/16)-1 To 0 Step -1
      _EMPTY=True : A3=0 : A4=0
      For L=0 To _HEIGHT-1
         A1=Deek(PLANE1+(G*2)+(L*_MODULO))
         A2=Deek(PLANE2+(G*2)+(L*_MODULO))
         If _DEPTH=4
            A3=Deek(PLANE3+(G*2)+(L*_MODULO))
            A4=Deek(PLANE4+(G*2)+(L*_MODULO))
         End If 

         If A1<>0 or A2<>0 or A3<>0 or A4<>0
            _EMPTY=False
            Exit 
         End If 
      Next L
      If _EMPTY=True
         Add _A_WIDTH,-16
      End If 
   Next G

   If _A_WIDTH=0
      Return 
   End If 

   'Test upper bitplanes for being empty
   If _DEPTH=4
      _EMPTY=True
      For L=0 To _HEIGHT-1
         For G=0 To(_A_WIDTH/16)-1
            A3=Deek(PLANE3+(G*2)+(L*_MODULO))
            A4=Deek(PLANE4+(G*2)+(L*_MODULO))
            If A3<>0 or A4<>0
               _EMPTY=False
               Exit 
            End If 
         Next G
         If _EMPTY=False
            Exit 
         End If 
      Next L
      If _EMPTY=True
         _A_DEPTH=2
      End If 
   End If 

   'Test top lines for being empty
   For L=0 To _HEIGHT-1
   A1=0 : A2=0 : A3=0 : A4=0
      For G=0 To(_A_WIDTH/16)-1
         A1=A1+Deek(PLANE1+(G*2)+(L*_MODULO))
         A2=A2+Deek(PLANE2+(G*2)+(L*_MODULO))
         If _A_DEPTH=4
            A3=A3+Deek(PLANE3+(G*2)+(L*_MODULO))
            A4=A3+Deek(PLANE4+(G*2)+(L*_MODULO))
         End If 
      Next G
      If A1<>0 or A2<>0 or A3<>0 or A4<>0
         _A_START=L
         Exit 
      End If 
   Next L

   'Test bottom lines for being empty 
   For L=_HEIGHT-1 To 0 Step -1
   A1=0 : A2=0 : A3=0 : A4=0
      For G=0 To(_A_WIDTH/16)-1
         A1=A1+Deek(PLANE1+(G*2)+(L*_MODULO))
         A2=A2+Deek(PLANE2+(G*2)+(L*_MODULO))
         If _A_DEPTH=4
            A3=A3+Deek(PLANE3+(G*2)+(L*_MODULO))
            A4=A4+Deek(PLANE4+(G*2)+(L*_MODULO))
         End If 
      Next G
      If A1<>0 or A2<>0 or A3<>0 or A4<>0
         _A_END=L
         Exit 
      End If 
   Next L

   _A_HEIGHT=_A_END-_A_START+1
   _A_SPRITE_SIZE=4+(4*_A_HEIGHT)+4
   _A_IMAGE_SIZE=_A_SPRITE_SIZE*(_A_DEPTH/2)*(_A_WIDTH/16)
   _A_TYPE=_A_WIDTH/16*(_A_DEPTH/2)
   If _A_DEPTH=4 Then Bset 4,_A_TYPE
   _A_VOFFS=_A_START+_VOFFS

   'DEBUG 
'   If IMG=23
'      Screen 0
'      Print "","_A_START",_A_START
'      Print "","_A_END",_A_END
'      Print "","_A_HEIGHT",_A_HEIGHT
'      Print "","_A_SPRITE_SIZE",_A_SPRITE_SIZE
'      Print "","_A_IMAGE_SIZE",_A_IMAGE_SIZE
'      Print "","_A_TYPE",_A_TYPE
'      Print "","_A_VOFFS",_A_VOFFS
'      Erase 5 
'      End   
'   End If 

Return 

_GET_SPRITE:
   'Write Address 
   WA=_IMAGES_PT+_OFFSET_OF_NEXT
   WAI=WA+4

   For G=0 To(_A_WIDTH/16)-1
      For L=_A_START To _A_END
         WL=(L-_A_START)*4
         Doke WAI+WL,Deek(PLANE1+(G*2)+(L*_MODULO))
         Doke WAI+WL+2,Deek(PLANE2+(G*2)+(L*_MODULO))
         If _A_DEPTH=4
            Doke WAI+_A_SPRITE_SIZE+WL,Deek(PLANE3+(G*2)+(L*_MODULO))
            Doke WAI+_A_SPRITE_SIZE+WL+2,Deek(PLANE4+(G*2)+(L*_MODULO))
         End If 
      Next L
      Add WAI,_A_SPRITE_SIZE*_A_DEPTH/2
   Next G

Return 

_SET_TABLE:
   TEA=_TABLE_PT+(IMG*4)
   'Set offset
   Doke TEA,_OFFSET_OF_NEXT
   'Set Type
   Poke TEA+2,_A_TYPE
   'Set V-offset  
   Poke TEA+3,_A_VOFFS

   Add _OFFSET_OF_NEXT,_A_IMAGE_SIZE
   If _OFFSET_OF_NEXT>$FFFF
      Print "","Sprite bank too big!"
      End 
   End If 
Return 

Procedure DUMPCOLORS
   For C=0 To 7
      Print "","",Hex$(Colour(C)),Hex$(Colour(C+8))
   Next 
End Proc

